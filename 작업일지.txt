# 23/03/08

- git setting
	- 각자 작업물을 올리는 branch는 study_개인 식별자로 결정
	- main에 관련된 권한 설정
	- branch naming 변경
		- git branch는 /를 파일 경로로 인식하여 문제가 생긴다.
		- 이름을 살짝 변경하여 문제를 우회하기로 결정
			- 브랜치 처음 생성땐 풀네임, 하위 브랜치는 축약어를 사용한다
				-  ex) backend => be/develop => be/dev/feature => ...

- nft Sub PJT
	- 과제 1 : ERC721 구현
		- openzeppelin의 코드를 직접 쳐보며 문법 및 작동 방식을 익혔다.
	- 과제 2: NFT Creator 구현
		- 참고) https://www.youtube.com/watch?v=TYezN5r228U
			- nft 생성 과정
			1) 이미지를 ipfs에 올린다.
			2) metadata JSON 파일을 ipfs에 올린다.
			3) ERC721민터 코드를 블록체인에 올린다.
			4) NFT를 민트한다
			5) 지갑에서 확인한다.
			
			- erc721이란?
				- nft의 표준, ERC20에 토큰 ID, metadata JSON 추가된 것
				- 토큰 ID? NFT에 붙는 개별 식별 번호 => nft를 고유한 것으로 만든다.
				- 메타데이터 json => nft에 넣을 정보를 담는 그릇

			- ipfs란?
				- 위변조 불가능한 저장소
				- 블록체인을 활용한 p2p 분산형 웹 저장소이다.
				- 블록체인 자체에 image와 metedata를 넣기엔 비싸기 때문에 ipfs를 사용한다.
	- 과제 3: 테스트 코드 작성 중
		- Mocha
			- truffle은 내부적으로 테스트를 위하여 mocha 프레임워크를 사용한다.
			- 컨트랙트를 배포한 후, truffle test ./test/<FILENAME>으로 테스트를 실행하면 test 폴더 하위의 js 파일들이 모두 실행된다.

----------------------------------------------------------------------------------------------------------------------------------

# 23/03/09

- nft Sub PJT
	- 과제 2 수정
		- Counters.Counter 사용
			- OpenZeppelin이 제공하는 library.
			- counter는 storage를 사용하여 thread-safe하게 동작한다. 
	- 과제 3 test code 작성
		- web3의 통신 방식
			- 함수.call()로 함수를 호출할 경우 read only, 즉 local로 작동된다
			- 함수를 호출할 때, transaction이 발생하는 함수라면, return값은 transaction hash가 된다. 값은 logs[0].args[2]에 들어있다.
			- transaction이 발생하지 않는 함수라면, return 값은 주어진 대로 온다.
			- uint 값의 경우 BN(big number)라는 객체의 형식으로 오는데, 숫자처럼 사용이 가능하다.
	- 과제 4 배포
		- truffle migrate나 truffle test를 사용하기 위해서는 ganache가 설치되어 있어야 한다.
		- npm install -g ganache-cli로 설치 가능
		- 터미널을 하나 더 실행시킨 뒤 ganache-cli로 실행시킨다.

- infra 설계
	- S3 저장 구조 토의
		/users
		  └  /[이용자id]
			  └  /profile.jpg
		/books
		  └  /[챌린지id]
			  └  /[동화id]
				  └  /page0.jpg
				  └  /page1.jpg
				  └  ...





		        