{
  "contractName": "LibArbitrumL2",
  "abi": [
    {
      "inputs": [],
      "name": "ARBSYS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ARBSYS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Primitives for cross-chain aware contracts for https://arbitrum.io/[Arbitrum]. This version should only be used on L2 to process cross-chain messages originating from L1. For the other side, use {LibArbitrumL1}. WARNING: There is currently a bug in Arbitrum that causes this contract to fail to detect cross-chain calls when deployed behind a proxy. This will be fixed when the network is upgraded to Arbitrum Nitro, currently scheduled for August 31st 2022.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ARBSYS\":{\"details\":\"Returns whether the current function call is the result of a cross-chain message relayed by `arbsys`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/crosschain/arbitrum/LibArbitrumL2.sol\":\"LibArbitrumL2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/crosschain/arbitrum/LibArbitrumL2.sol\":{\"keccak256\":\"0x1b844a2a99922619347974e73baacacf4d1cef0f7bd3c8daadb3e5429249bbe7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://486d1f7d934f2e398d22dc68dafa120ec586554ddb497f2524b078ef80f7aa4b\",\"dweb:/ipfs/Qmf5gw1pBfTCsxGmNmNrse9KGCNY4i2V3gfwgSmWoVyyG7\"]},\"project:/contracts/crosschain/errors.sol\":{\"keccak256\":\"0x9d3ffe3bc59c2dac36d93cb4641ffeaa98b96cce588d106efe050a0b67b4d902\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf8c1e49412c6975de84fe2c72f6785f139d36843aaa623bc9964003748b3757\",\"dweb:/ipfs/QmcDPdSYsWHGnMZB6yHH8Tczr16QVjd8TjPcMVDdyvPV1W\"]},\"project:/contracts/vendor/arbitrum/IArbSys.sol\":{\"keccak256\":\"0xb89dd723234b4d9ce13083eec9a530ceceeb618412bc3b7ac3d37d0a2a6874e0\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://e3a598a3cc3caa09d33bcf2a120d457b2f69d770c173055b42948210ae34643f\",\"dweb:/ipfs/QmXBgdEomTjn6L9pXEb8hUzwUJ5S9zAuZE5qQVtbJwWvBn\"]}},\"version\":1}",
  "bytecode": "0x60e3610052600b82828239805160001a607314610045577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063bf0a12cf146038575b600080fd5b603e6052565b604051604991906094565b60405180910390f35b606481565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006080826057565b9050919050565b608e816077565b82525050565b600060208201905060a760008301846087565b9291505056fea2646970667358221220c9882c369b0de1c21bae53098af47fd346dad618b30000c376ca1ea4bf68ebb364736f6c63430008130033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063bf0a12cf146038575b600080fd5b603e6052565b604051604991906094565b60405180910390f35b606481565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006080826057565b9050919050565b608e816077565b82525050565b600060208201905060a760008301846087565b9291505056fea2646970667358221220c9882c369b0de1c21bae53098af47fd346dad618b30000c376ca1ea4bf68ebb364736f6c63430008130033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:614:257",
        "statements": [
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "52:81:257",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "62:65:257",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "77:5:257"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "84:42:257",
                        "type": "",
                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                      }
                    ],
                    "functionName": {
                      "name": "and",
                      "nodeType": "YulIdentifier",
                      "src": "73:3:257"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "73:54:257"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "62:7:257"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_uint160",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "34:5:257",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "44:7:257",
                "type": ""
              }
            ],
            "src": "7:126:257"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "184:51:257",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "194:35:257",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "223:5:257"
                      }
                    ],
                    "functionName": {
                      "name": "cleanup_t_uint160",
                      "nodeType": "YulIdentifier",
                      "src": "205:17:257"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "205:24:257"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "194:7:257"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "166:5:257",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "176:7:257",
                "type": ""
              }
            ],
            "src": "139:96:257"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "314:53:257",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "331:3:257"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "354:5:257"
                          }
                        ],
                        "functionName": {
                          "name": "cleanup_t_address",
                          "nodeType": "YulIdentifier",
                          "src": "336:17:257"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "336:24:257"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "324:6:257"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "324:37:257"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "324:37:257"
                }
              ]
            },
            "name": "abi_encode_t_address_to_t_address_fromStack_library",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "302:5:257",
                "type": ""
              },
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "309:3:257",
                "type": ""
              }
            ],
            "src": "241:126:257"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "479:132:257",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "489:26:257",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "501:9:257"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "512:2:257",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "497:3:257"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "497:18:257"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "489:4:257"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "577:6:257"
                      },
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "590:9:257"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "601:1:257",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "586:3:257"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "586:17:257"
                      }
                    ],
                    "functionName": {
                      "name": "abi_encode_t_address_to_t_address_fromStack_library",
                      "nodeType": "YulIdentifier",
                      "src": "525:51:257"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "525:79:257"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "525:79:257"
                }
              ]
            },
            "name": "abi_encode_tuple_t_address__to_t_address__fromStack_library_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "451:9:257",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "463:6:257",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "474:4:257",
                "type": ""
              }
            ],
            "src": "373:238:257"
          }
        ]
      },
      "contents": "{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_library_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack_library(value0,  add(headStart, 0))\n\n    }\n\n}\n",
      "id": 257,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "773:999:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "773:999:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;943:75;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;976:42;943:75;:::o;7:126:257:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:126::-;336:24;354:5;336:24;:::i;:::-;331:3;324:37;241:126;;:::o;373:238::-;474:4;512:2;501:9;497:18;489:26;;525:79;601:1;590:9;586:17;577:6;525:79;:::i;:::-;373:238;;;;:::o",
  "source": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (crosschain/arbitrum/LibArbitrumL2.sol)\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport {IArbSys as ArbitrumL2_Bridge} from \"../../vendor/arbitrum/IArbSys.sol\";\r\nimport \"../errors.sol\";\r\n\r\n/**\r\n * @dev Primitives for cross-chain aware contracts for\r\n * https://arbitrum.io/[Arbitrum].\r\n *\r\n * This version should only be used on L2 to process cross-chain messages\r\n * originating from L1. For the other side, use {LibArbitrumL1}.\r\n *\r\n * WARNING: There is currently a bug in Arbitrum that causes this contract to\r\n * fail to detect cross-chain calls when deployed behind a proxy. This will be\r\n * fixed when the network is upgraded to Arbitrum Nitro, currently scheduled for\r\n * August 31st 2022.\r\n */\r\nlibrary LibArbitrumL2 {\r\n    /**\r\n     * @dev Returns whether the current function call is the result of a\r\n     * cross-chain message relayed by `arbsys`.\r\n     */\r\n    address public constant ARBSYS = 0x0000000000000000000000000000000000000064;\r\n\r\n    function isCrossChain(address arbsys) internal view returns (bool) {\r\n        return ArbitrumL2_Bridge(arbsys).wasMyCallersAddressAliased();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the sender that triggered the current\r\n     * cross-chain message through `arbsys`.\r\n     *\r\n     * NOTE: {isCrossChain} should be checked before trying to recover the\r\n     * sender, as it will revert with `NotCrossChainCall` if the current\r\n     * function call is not the result of a cross-chain message.\r\n     */\r\n    function crossChainSender(address arbsys) internal view returns (address) {\r\n        if (!isCrossChain(arbsys)) revert NotCrossChainCall();\r\n\r\n        return ArbitrumL2_Bridge(arbsys).myCallersAddressWithoutAliasing();\r\n    }\r\n}\r\n",
  "sourcePath": "C:\\Users\\akqjq\\Desktop\\S08P22A308\\smart-contracts\\contracts\\crosschain\\arbitrum\\LibArbitrumL2.sol",
  "ast": {
    "absolutePath": "project:/contracts/crosschain/arbitrum/LibArbitrumL2.sol",
    "exportedSymbols": {
      "ArbitrumL2_Bridge": [
        39591
      ],
      "InvalidCrossChainSender": [
        1867
      ],
      "LibArbitrumL2": [
        1857
      ],
      "NotCrossChainCall": [
        1861
      ]
    },
    "id": 1858,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1811,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "124:23:17"
      },
      {
        "absolutePath": "project:/contracts/vendor/arbitrum/IArbSys.sol",
        "file": "../../vendor/arbitrum/IArbSys.sol",
        "id": 1813,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1858,
        "sourceUnit": 39592,
        "src": "151:79:17",
        "symbolAliases": [
          {
            "foreign": {
              "id": 1812,
              "name": "IArbSys",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 39591,
              "src": "159:7:17",
              "typeDescriptions": {}
            },
            "local": "ArbitrumL2_Bridge",
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/crosschain/errors.sol",
        "file": "../errors.sol",
        "id": 1814,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1858,
        "sourceUnit": 1868,
        "src": "232:23:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "LibArbitrumL2",
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 1815,
          "nodeType": "StructuredDocumentation",
          "src": "259:512:17",
          "text": " @dev Primitives for cross-chain aware contracts for\n https://arbitrum.io/[Arbitrum].\n This version should only be used on L2 to process cross-chain messages\n originating from L1. For the other side, use {LibArbitrumL1}.\n WARNING: There is currently a bug in Arbitrum that causes this contract to\n fail to detect cross-chain calls when deployed behind a proxy. This will be\n fixed when the network is upgraded to Arbitrum Nitro, currently scheduled for\n August 31st 2022."
        },
        "fullyImplemented": true,
        "id": 1857,
        "linearizedBaseContracts": [
          1857
        ],
        "name": "LibArbitrumL2",
        "nameLocation": "781:13:17",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "documentation": {
              "id": 1816,
              "nodeType": "StructuredDocumentation",
              "src": "802:135:17",
              "text": " @dev Returns whether the current function call is the result of a\n cross-chain message relayed by `arbsys`."
            },
            "functionSelector": "bf0a12cf",
            "id": 1819,
            "mutability": "constant",
            "name": "ARBSYS",
            "nameLocation": "967:6:17",
            "nodeType": "VariableDeclaration",
            "scope": 1857,
            "src": "943:75:17",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1817,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "943:7:17",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303634",
              "id": 1818,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "976:42:17",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "value": "0x0000000000000000000000000000000000000064"
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 1832,
              "nodeType": "Block",
              "src": "1094:80:17",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "arguments": [
                          {
                            "id": 1827,
                            "name": "arbsys",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1821,
                            "src": "1130:6:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1826,
                          "name": "ArbitrumL2_Bridge",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39591,
                          "src": "1112:17:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IArbSys_$39591_$",
                            "typeString": "type(contract IArbSys)"
                          }
                        },
                        "id": 1828,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1112:25:17",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IArbSys_$39591",
                          "typeString": "contract IArbSys"
                        }
                      },
                      "id": 1829,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1138:26:17",
                      "memberName": "wasMyCallersAddressAliased",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 39502,
                      "src": "1112:52:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_bool_$",
                        "typeString": "function () view external returns (bool)"
                      }
                    },
                    "id": 1830,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1112:54:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1825,
                  "id": 1831,
                  "nodeType": "Return",
                  "src": "1105:61:17"
                }
              ]
            },
            "id": 1833,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isCrossChain",
            "nameLocation": "1036:12:17",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1822,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1821,
                  "mutability": "mutable",
                  "name": "arbsys",
                  "nameLocation": "1057:6:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 1833,
                  "src": "1049:14:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1820,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1049:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1048:16:17"
            },
            "returnParameters": {
              "id": 1825,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1824,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1833,
                  "src": "1088:4:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1823,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1088:4:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1087:6:17"
            },
            "scope": 1857,
            "src": "1027:147:17",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1855,
              "nodeType": "Block",
              "src": "1618:151:17",
              "statements": [
                {
                  "condition": {
                    "id": 1844,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "1633:21:17",
                    "subExpression": {
                      "arguments": [
                        {
                          "id": 1842,
                          "name": "arbsys",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1836,
                          "src": "1647:6:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1841,
                        "name": "isCrossChain",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1833,
                        "src": "1634:12:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                          "typeString": "function (address) view returns (bool)"
                        }
                      },
                      "id": 1843,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1634:20:17",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1848,
                  "nodeType": "IfStatement",
                  "src": "1629:53:17",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1845,
                        "name": "NotCrossChainCall",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1861,
                        "src": "1663:17:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 1846,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1663:19:17",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 1847,
                    "nodeType": "RevertStatement",
                    "src": "1656:26:17"
                  }
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "arguments": [
                          {
                            "id": 1850,
                            "name": "arbsys",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1836,
                            "src": "1720:6:17",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1849,
                          "name": "ArbitrumL2_Bridge",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39591,
                          "src": "1702:17:17",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IArbSys_$39591_$",
                            "typeString": "type(contract IArbSys)"
                          }
                        },
                        "id": 1851,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1702:25:17",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IArbSys_$39591",
                          "typeString": "contract IArbSys"
                        }
                      },
                      "id": 1852,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1728:31:17",
                      "memberName": "myCallersAddressWithoutAliasing",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 39508,
                      "src": "1702:57:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                        "typeString": "function () view external returns (address)"
                      }
                    },
                    "id": 1853,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1702:59:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 1840,
                  "id": 1854,
                  "nodeType": "Return",
                  "src": "1695:66:17"
                }
              ]
            },
            "documentation": {
              "id": 1834,
              "nodeType": "StructuredDocumentation",
              "src": "1182:356:17",
              "text": " @dev Returns the address of the sender that triggered the current\n cross-chain message through `arbsys`.\n NOTE: {isCrossChain} should be checked before trying to recover the\n sender, as it will revert with `NotCrossChainCall` if the current\n function call is not the result of a cross-chain message."
            },
            "id": 1856,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "crossChainSender",
            "nameLocation": "1553:16:17",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1837,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1836,
                  "mutability": "mutable",
                  "name": "arbsys",
                  "nameLocation": "1578:6:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 1856,
                  "src": "1570:14:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1835,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1570:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1569:16:17"
            },
            "returnParameters": {
              "id": 1840,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1839,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1856,
                  "src": "1609:7:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1838,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1609:7:17",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1608:9:17"
            },
            "scope": 1857,
            "src": "1544:225:17",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 1858,
        "src": "773:999:17",
        "usedErrors": []
      }
    ],
    "src": "124:1650:17"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.19+commit.7dd6d404.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2023-03-22T16:34:02.559Z",
  "devdoc": {
    "details": "Primitives for cross-chain aware contracts for https://arbitrum.io/[Arbitrum]. This version should only be used on L2 to process cross-chain messages originating from L1. For the other side, use {LibArbitrumL1}. WARNING: There is currently a bug in Arbitrum that causes this contract to fail to detect cross-chain calls when deployed behind a proxy. This will be fixed when the network is upgraded to Arbitrum Nitro, currently scheduled for August 31st 2022.",
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "ARBSYS": {
        "details": "Returns whether the current function call is the result of a cross-chain message relayed by `arbsys`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}