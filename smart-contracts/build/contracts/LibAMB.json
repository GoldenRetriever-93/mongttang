{
  "contractName": "LibAMB",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Primitives for cross-chain aware contracts using the https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB] family of bridges.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/crosschain/amb/LibAMB.sol\":\"LibAMB\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/crosschain/amb/LibAMB.sol\":{\"keccak256\":\"0xa71a182671c3d2e4a29ad34fc92b7cfb39c93bbdf5680f6a68fc1e2ceb7d04a1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://82df00a2f160677abc3f3442a6b84651b4dd0343e8d613fb12efec0017d9d30d\",\"dweb:/ipfs/Qma7NiiqRLvwjzZeU2ddLZskYeNkp58imQnX4QnCzBPVoy\"]},\"project:/contracts/crosschain/errors.sol\":{\"keccak256\":\"0x9d3ffe3bc59c2dac36d93cb4641ffeaa98b96cce588d106efe050a0b67b4d902\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf8c1e49412c6975de84fe2c72f6785f139d36843aaa623bc9964003748b3757\",\"dweb:/ipfs/QmcDPdSYsWHGnMZB6yHH8Tczr16QVjd8TjPcMVDdyvPV1W\"]},\"project:/contracts/vendor/amb/IAMB.sol\":{\"keccak256\":\"0x0de92ea32332bb4804f24e5982bd700e19b236a46c87f6e64d3a34dfc2041a23\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://adc0359f9341942859dee5eacbc666ae91512aa4254bb02b8a2423dfb77def53\",\"dweb:/ipfs/QmbYivCCuwLdLk5E1FeHTw4PxbQBXgTwVtbe3HHbwnF4Lt\"]}},\"version\":1}",
  "bytecode": "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208e378d365926d3dc0d3c6fa86088bee0e4bc894af17454d68e67af93e97657ff64736f6c63430008130033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208e378d365926d3dc0d3c6fa86088bee0e4bc894af17454d68e67af93e97657ff64736f6c63430008130033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "390:847:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "390:847:13:-:0;;;;;;;;",
  "source": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (crosschain/amb/LibAMB.sol)\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport {IAMB as AMB_Bridge} from \"../../vendor/amb/IAMB.sol\";\r\nimport \"../errors.sol\";\r\n\r\n/**\r\n * @dev Primitives for cross-chain aware contracts using the\r\n * https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB]\r\n * family of bridges.\r\n */\r\nlibrary LibAMB {\r\n    /**\r\n     * @dev Returns whether the current function call is the result of a\r\n     * cross-chain message relayed by `bridge`.\r\n     */\r\n    function isCrossChain(address bridge) internal view returns (bool) {\r\n        return msg.sender == bridge;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the sender that triggered the current\r\n     * cross-chain message through `bridge`.\r\n     *\r\n     * NOTE: {isCrossChain} should be checked before trying to recover the\r\n     * sender, as it will revert with `NotCrossChainCall` if the current\r\n     * function call is not the result of a cross-chain message.\r\n     */\r\n    function crossChainSender(address bridge) internal view returns (address) {\r\n        if (!isCrossChain(bridge)) revert NotCrossChainCall();\r\n        return AMB_Bridge(bridge).messageSender();\r\n    }\r\n}\r\n",
  "sourcePath": "C:\\Users\\akqjq\\Desktop\\S08P22A308\\smart-contracts\\contracts\\crosschain\\amb\\LibAMB.sol",
  "ast": {
    "absolutePath": "project:/contracts/crosschain/amb/LibAMB.sol",
    "exportedSymbols": {
      "AMB_Bridge": [
        39445
      ],
      "InvalidCrossChainSender": [
        1867
      ],
      "LibAMB": [
        1657
      ],
      "NotCrossChainCall": [
        1861
      ]
    },
    "id": 1658,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1615,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "112:23:13"
      },
      {
        "absolutePath": "project:/contracts/vendor/amb/IAMB.sol",
        "file": "../../vendor/amb/IAMB.sol",
        "id": 1617,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1658,
        "sourceUnit": 39446,
        "src": "139:61:13",
        "symbolAliases": [
          {
            "foreign": {
              "id": 1616,
              "name": "IAMB",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 39445,
              "src": "147:4:13",
              "typeDescriptions": {}
            },
            "local": "AMB_Bridge",
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/crosschain/errors.sol",
        "file": "../errors.sol",
        "id": 1618,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1658,
        "sourceUnit": 1868,
        "src": "202:23:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "LibAMB",
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 1619,
          "nodeType": "StructuredDocumentation",
          "src": "229:159:13",
          "text": " @dev Primitives for cross-chain aware contracts using the\n https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB]\n family of bridges."
        },
        "fullyImplemented": true,
        "id": 1657,
        "linearizedBaseContracts": [
          1657
        ],
        "name": "LibAMB",
        "nameLocation": "398:6:13",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1632,
              "nodeType": "Block",
              "src": "620:46:13",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1630,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 1627,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967281,
                        "src": "638:3:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1628,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "642:6:13",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "638:10:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 1629,
                      "name": "bridge",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1622,
                      "src": "652:6:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "638:20:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1626,
                  "id": 1631,
                  "nodeType": "Return",
                  "src": "631:27:13"
                }
              ]
            },
            "documentation": {
              "id": 1620,
              "nodeType": "StructuredDocumentation",
              "src": "412:135:13",
              "text": " @dev Returns whether the current function call is the result of a\n cross-chain message relayed by `bridge`."
            },
            "id": 1633,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isCrossChain",
            "nameLocation": "562:12:13",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1623,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1622,
                  "mutability": "mutable",
                  "name": "bridge",
                  "nameLocation": "583:6:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 1633,
                  "src": "575:14:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1621,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "575:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "574:16:13"
            },
            "returnParameters": {
              "id": 1626,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1625,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1633,
                  "src": "614:4:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1624,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "614:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "613:6:13"
            },
            "scope": 1657,
            "src": "553:113:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1655,
              "nodeType": "Block",
              "src": "1110:124:13",
              "statements": [
                {
                  "condition": {
                    "id": 1644,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "1125:21:13",
                    "subExpression": {
                      "arguments": [
                        {
                          "id": 1642,
                          "name": "bridge",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1636,
                          "src": "1139:6:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1641,
                        "name": "isCrossChain",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1633,
                        "src": "1126:12:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                          "typeString": "function (address) view returns (bool)"
                        }
                      },
                      "id": 1643,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1126:20:13",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1648,
                  "nodeType": "IfStatement",
                  "src": "1121:53:13",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1645,
                        "name": "NotCrossChainCall",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1861,
                        "src": "1155:17:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 1646,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1155:19:13",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 1647,
                    "nodeType": "RevertStatement",
                    "src": "1148:26:13"
                  }
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "arguments": [
                          {
                            "id": 1650,
                            "name": "bridge",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1636,
                            "src": "1203:6:13",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1649,
                          "name": "AMB_Bridge",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39445,
                          "src": "1192:10:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IAMB_$39445_$",
                            "typeString": "type(contract IAMB)"
                          }
                        },
                        "id": 1651,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1192:18:13",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IAMB_$39445",
                          "typeString": "contract IAMB"
                        }
                      },
                      "id": 1652,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1211:13:13",
                      "memberName": "messageSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 39364,
                      "src": "1192:32:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                        "typeString": "function () view external returns (address)"
                      }
                    },
                    "id": 1653,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1192:34:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 1640,
                  "id": 1654,
                  "nodeType": "Return",
                  "src": "1185:41:13"
                }
              ]
            },
            "documentation": {
              "id": 1634,
              "nodeType": "StructuredDocumentation",
              "src": "674:356:13",
              "text": " @dev Returns the address of the sender that triggered the current\n cross-chain message through `bridge`.\n NOTE: {isCrossChain} should be checked before trying to recover the\n sender, as it will revert with `NotCrossChainCall` if the current\n function call is not the result of a cross-chain message."
            },
            "id": 1656,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "crossChainSender",
            "nameLocation": "1045:16:13",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1637,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1636,
                  "mutability": "mutable",
                  "name": "bridge",
                  "nameLocation": "1070:6:13",
                  "nodeType": "VariableDeclaration",
                  "scope": 1656,
                  "src": "1062:14:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1635,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1062:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1061:16:13"
            },
            "returnParameters": {
              "id": 1640,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1639,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1656,
                  "src": "1101:7:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1638,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1101:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1100:9:13"
            },
            "scope": 1657,
            "src": "1036:198:13",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 1658,
        "src": "390:847:13",
        "usedErrors": []
      }
    ],
    "src": "112:1127:13"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.19+commit.7dd6d404.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.13",
  "updatedAt": "2023-03-22T16:34:02.556Z",
  "devdoc": {
    "details": "Primitives for cross-chain aware contracts using the https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB] family of bridges.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}