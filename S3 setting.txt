# AWS S3

- 생성
	- 권장사항 유지, 퍼블릭 액세스도 차단해둔다.

-설정

build.gradle 의존성 추가

	// https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-aws
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.1.RELEASE'

업로더 서비스 예시 ( https://velog.io/@jodawooooon/SpringBoot-S3%EC%99%80-CloudFront%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%82%AC%EC%A7%84-%EC%97%85%EB%A1%9C%EB%93%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0)


내가 작성한 코드
```
package com.ssafy.mongttang.service;

import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.DeleteObjectRequest;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.time.LocalDateTime;

@Slf4j
@RequiredArgsConstructor
@Component
public class S3Service {
    private final AmazonS3Client amazonS3Client;

    //application.yml에 설정
    @Value("${cloud.aws.s3.bucket}")
    private String bucket;

    //이미지 업로딩. dirName은 폴더명이며 dirName/멀티파트파일의 이름+현재시간의 이름으로 파일이 생성된다. 반환값은 경로값이다.
    public String uploadImage(MultipartFile multipartFile, String dirName) throws IOException {
        log.info("[uploadImage] 이미지 업로드 시작." );
        String fileName = dirName + "/" + multipartFile.getName() + LocalDateTime.now();
        // dirname = Id / 파일이름.시각
        ObjectMetadata objectMetaData = new ObjectMetadata();
        objectMetaData.setContentType(multipartFile.getContentType());
        objectMetaData.setContentLength(multipartFile.getSize());

        amazonS3Client.putObject(new PutObjectRequest(bucket, fileName, multipartFile.getInputStream(), objectMetaData));
        log.info("[uploadImage] 이미지 업로드 완료. 저장된 경로 : {}", fileName);
        return fileName;
    }

    //폴더명을 포함한 파일 이름(경로)를 받아 삭제한다.
    public void deleteImage(String fileName) {
        log.info("[deleteImage] 이미지 삭제 시작. 대상 파일 : {}", fileName);
        amazonS3Client.deleteObject(new DeleteObjectRequest(bucket, fileName));
        log.info("[uploadImage] 이미지 삭제 완료." );
    }
}

```

- AWS IAM설정
	- 직접 정책 연결 : AmazonS3FullAccess 권한 정책을 체크해준다.
	- access-key, secret-key 복사

application.properties에 설정

```
# S3
cloud.aws.credentials.accessKey= 엑세스 키
cloud.aws.credentials.secretKey= 시크릿 키
cloud.aws.s3.bucket= 버킷이름
cloud.aws.region.static=ap-northeast-2
cloud.aws.stack.auto-=false

#파일 용량 제한
spring.servlet.multipart.maxFileSize=1MB
spring.servlet.multipart.maxRequestSize=1MB
```

config file 생성(생성하지 않더라도 spring boot가 자동으로 설정해주지만, 오류방지 및 수정 편의성을 위해 작성해주자.

```
package com.ssafy.mongttang.config;

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;

@Configuration
public class S3Config {

    @Value("${cloud.aws.credentials.accessKey}")
    private String accessKey;

    @Value("${cloud.aws.credentials.secretKey}")
    private String secretKey;

    @Value("${cloud.aws.region.static}")
    private String region;
    @Bean
    public AmazonS3Client amazonS3Client() {
        BasicAWSCredentials basicAWSCredentials = new BasicAWSCredentials(accessKey, secretKey);
        return (AmazonS3Client) AmazonS3ClientBuilder
                .standard()
                .withCredentials(new AWSStaticCredentialsProvider(basicAWSCredentials))
                .withRegion(region)
                .build();
    }
}
```

--------------------------------------------------------------

cloudfront 

생성할 때 원본 도메인 (s3)선택

원본 경로 => /{폴더명} 을 넣어주면 s3전체가 아닌 s3의 해당 경로에서 파일을 찾아줌.

원본 액세스 제어 설정 선택 (s3에 대한 접근을 cloudfront로 제한한다)

정책 복사 후 s3 정책을 변경한다. 